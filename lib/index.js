'use strict';function _slicedToArray(a,b){return _arrayWithHoles(a)||_iterableToArrayLimit(a,b)||_nonIterableRest()}function _arrayWithHoles(a){if(Array.isArray(a))return a}
function _iterableToArrayLimit(a,b){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a)){var c=[],d=!0,f=!1,g=void 0;try{for(var e=a[Symbol.iterator](),h;!(d=(h=e.next()).done)&&(c.push(h.value),!b||c.length!==b);d=!0);}catch(k){f=!0,g=k}finally{try{if(!d&&null!=e["return"])e["return"]()}finally{if(f)throw g;}}return c}}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance");}
function getPrecision(a){a=+a;if(Number.isNaN(a))return NaN;a=a.toString();var b=/^[+-]?\d+(?:\.(\d+))?e([+-]?\d+)$/,c=/^[+-]?\d+(?:\.(\d+))?$/,d=/^[+-]?\d+?(0+)$/;return d.test(a)?(a=a.match(d)[1])?-a.length:0:c.test(a)?(a=a.match(c)[1])?a.length:0:b.test(a)?(a=a.match(b),b=_slicedToArray(a,3),a=b[1],b=b[2],Math.abs(+(void 0===b?0:b)-(void 0===a?"":a).length)):0}
function approx(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:0,d=Math.max(getPrecision(a),getPrecision(b),getPrecision(c));return+Math.abs(a-b).toFixed(d)<=c}function modulo(a,b){return(+a%+b+ +b)%+b}function round(a){var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;return+(+(a*Math.pow(10,b)).toFixed(0)*Math.pow(10,-b)).toFixed(0>b?0:b)}
function toNumber(a){var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:12;if(null==a||Array.isArray(a))return NaN;a=a.toString();a=/%$/.test(a)?+a.slice(0,-1)/100:+a;void 0!==b&&(a=round(a,b));return a}function random(){var a=1<arguments.length&&void 0!==arguments[1]?arguments[1]:12,b=_slicedToArray(0<arguments.length&&void 0!==arguments[0]?arguments[0]:[0,1],2),c=b[0];return toNumber(c+Math.random()*(b[1]-c),a)}var MathX={approx,getPrecision,modulo,random,round,toNumber};
module.exports=MathX
